/**
 * Extracts
 * @param element Element node which
 * @param options
 */
export function extractStyle(element) {
    var props = element.properties;
    if (props) {
        if (typeof props.style === 'string') {
            return parseStyle(props.style);
        }
        else {
            return filterStyleProps(props);
        }
    }
    else {
        throw new Error("No properties found on " + element.tagName + " node!");
    }
}
/**
 * Converts style property value into a map where key is
 * the style rule and value is the value of that rule.
 * @param style Style property string.
 */
export function parseStyle(style) {
    var styleProperties = {};
    // Extract style statements into array of strings.
    var styleArray = style
        .replace(/\s/g, '')
        .split(';')
        .map(function (el) {
        var _a = el.split(':'), property = _a[0], value = _a[1];
        return { property: property, value: value };
    });
    // Remap array of {property, value} objects into a map.
    for (var _i = 0, styleArray_1 = styleArray; _i < styleArray_1.length; _i++) {
        var el = styleArray_1[_i];
        styleProperties[el.property] = el.value;
    }
    return styleProperties;
}
/**
 * Filters out just the properties that are considered
 * style properties, i.e. `fill`, `color`, etc.
 * @param props Any properties from the HAST node.
 */
export function filterStyleProps(props) {
    return Object.keys(props)
        .filter(function (key) { return StylePropertiesSet.has(key); })
        .reduce(function (obj, key) {
        obj[key] = props[key];
        return obj;
    }, {});
}
export var StylePropertiesSet = new Set([
    'alignment-baseline',
    'baseline-shift',
    'clip',
    'clip-path',
    'clip-rule',
    'color',
    'color-interpolation',
    'color-interpolation-filters',
    'color-profile',
    'color-rendering',
    'cursor',
    'direction',
    'display',
    'dominant-baseline',
    'enable-background',
    'fill',
    'fill-opacity',
    'fill-rule',
    'filter',
    'flood-color',
    'flood-opacity',
    'font-family',
    'font-size',
    'font-size-adjust',
    'font-stretch',
    'font-style',
    'font-variant',
    'font-weight',
    'glyph-orientation-horizontal',
    'glyph-orientation-vertical',
    'image-rendering',
    'kerning',
    'letter-spacing',
    'lighting-color',
    'marker-end',
    'marker-mid',
    'marker-start',
    'mask',
    'opacity',
    'overflow',
    'pointer-events',
    'shape-rendering',
    'solid-color',
    'solid-opacity',
    'stop-color',
    'stop-opacity',
    'stroke',
    'stroke-dasharray',
    'stroke-dashoffset',
    'stroke-linecap',
    'stroke-linejoin',
    'stroke-miterlimit',
    'stroke-opacity',
    'stroke-width',
    'text-anchor',
    'text-decoration',
    'text-rendering',
    'transform',
    'unicode-bidi',
    'vector-effect',
    'visibility',
    'word-spacing',
    'writing-mode',
]);
//# sourceMappingURL=styleUtils.js.map