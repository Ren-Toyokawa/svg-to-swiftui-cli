import { ElementNode, RootNode } from 'svg-parser';
import { SVGElementProperties, ViewBoxData } from './types';
/**
 * Converts number with unit suffix to pixels.
 * @param number Number with the unit as a string.
 */
export declare function convertToPixels(num: string | number): number;
/**
 * Extracts properties of the <svg> node.
 * @param svgJsonTree
 */
export declare function extractSVGProperties(svg: ElementNode): SVGElementProperties;
/**
 * Performs Breadth First Search (BFS) to find <svg> element
 * @param rootNode Root node of given by SVG Parser
 */
export declare function getSVGElement(rootNode: RootNode): ElementNode | undefined;
/**
 * This function is used to cleanup expression like this: `0.5*width`.
 * If the expression is `1*width` there is no reason to multiply it by
 * 1, so we can just leave `width`. If the expression is `0*width`
 * then there is no reason to keep `width` around, so it just becomes
 * `0`.
 * @param value Numberic value.
 * @param suffix Variable suffix that is appended to the end (width,
 * height, etc.)
 */
export declare function clampNormalisedSizeProduct(value: string, suffix: string): string;
interface RectOrPosition {
    x: number;
    y: number;
    width?: number;
    height?: number;
}
/**
 * Normalises the position and size of the provided rectangle to span
 * from 0 to 1 based on the viewBox of the <svg> element. Width and
 * height are optional, so if only the position is required, then you
 * can just provide the x and y values.
 * @param rect ViewBox-like object with width and height being optional.
 * @param viewBox View box of the SVG Element.
 */
export declare function normaliseRectValues(rect: RectOrPosition, viewBox: ViewBoxData): RectOrPosition;
interface RectOrPositionString {
    x: string;
    y: string;
    width?: string;
    height?: string;
}
export declare function stringifyRectValues(rect: RectOrPosition, precision: number): RectOrPositionString;
export {};
