var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { extractStyle } from '../styleUtils';
import { handleElement } from './index';
/**
 * Transforms SVG group element into SwiftUI Shape by
 * accumulating subcomands of the children.
 * @param element Group element node
 * @param options Transpiler options
 */
export default function handleGroupElement(element, options) {
    var children = element.children;
    var style = element.type === 'element' ? extractStyle(element) : {};
    // For each child run the generator, accumulate swift string and return it.
    var acc = [];
    for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {
        var child = children_1[_i];
        // TODO: Handle string children properly.
        if (typeof child === 'string')
            continue;
        // TODO: Handle TextNode children properly.
        if (child.type === 'text')
            continue;
        // Append result to the accumulator.
        acc.push.apply(acc, handleElement(child, __assign(__assign({}, options), style)));
    }
    return acc;
}
//# sourceMappingURL=groupElementHandler.js.map