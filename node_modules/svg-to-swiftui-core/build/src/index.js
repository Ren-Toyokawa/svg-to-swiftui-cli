var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { parse } from 'svg-parser';
import { generateSwiftUIShape } from './stubs';
import { handleElement } from './elementHandlers';
import { extractSVGProperties, getSVGElement } from './utils';
import { DEFAULT_CONFIG } from './constants';
/**
 * This function converts SVG string into SwiftUI
 * Shape structure which is returned as a string.
 * @param rawSVGString SVG code as a raw string.
 * @param config Optional configuration object.
 */
export function convert(rawSVGString, config) {
    var AST = parse(rawSVGString);
    var svgElement = getSVGElement(AST);
    if (svgElement) {
        return swiftUIGenerator(svgElement, config);
    }
    else {
        throw new Error('Could not find SVG element, please provide full SVG source!');
    }
}
/**
 * Generates SwiftUI Shape string from SVG HAST (Abstract Syntax Tree).
 * @param svgElement Parsed SVG Abstract Syntax Tree.
 * @param config Optional configuration object.
 */
function swiftUIGenerator(svgElement, config) {
    var svgProperties = extractSVGProperties(svgElement);
    // The initial options passed to the first element.
    var rootTranspilerOptions = __assign(__assign({}, svgProperties), { precision: (config === null || config === void 0 ? void 0 : config.precision) || 10, lastPathId: 0, indentationSize: (config === null || config === void 0 ? void 0 : config.indentationSize) || 4, currentIndentationLevel: 0, parentStyle: {} });
    // Generate SwiftUI Shape body.
    var generatedBody = handleElement(svgElement, rootTranspilerOptions);
    // Inject generated body into the Shape struct template.
    var fullSwiftUIShape = generateSwiftUIShape(generatedBody, __assign(__assign({}, DEFAULT_CONFIG), config));
    return fullSwiftUIShape;
}
//# sourceMappingURL=index.js.map