import { clampNormalisedSizeProduct, stringifyRectValues } from '../../utils';
export var generateCubicCurveSwift = function (data, options) {
    // Convert raw values into width/height relative values.
    var xy1 = stringifyRectValues({
        x: data.x1 / options.viewBox.width,
        y: data.y1 / options.viewBox.height,
    }, options.precision);
    var xy2 = stringifyRectValues({
        x: data.x2 / options.viewBox.width,
        y: data.y2 / options.viewBox.height,
    }, options.precision);
    var xy = stringifyRectValues({
        x: data.x / options.viewBox.width,
        y: data.y / options.viewBox.height,
    }, options.precision);
    // Prepare string values.
    var p1x_str = clampNormalisedSizeProduct(xy.x, 'width');
    var p1y_str = clampNormalisedSizeProduct(xy.y, 'height');
    var p2x_str = clampNormalisedSizeProduct(xy1.x, 'width');
    var p2y_str = clampNormalisedSizeProduct(xy1.y, 'height');
    var p3x_str = clampNormalisedSizeProduct(xy2.x, 'width');
    var p3y_str = clampNormalisedSizeProduct(xy2.y, 'height');
    var swiftString = [
        "path.addCurve(to: CGPoint(x: " + p1x_str + ", y: " + p1y_str + "),",
        "control1: CGPoint(x: " + p2x_str + ", y: " + p2y_str + "),",
        "control2: CGPoint(x: " + p3x_str + ", y: " + p3y_str + "))",
    ].join(' ');
    return [swiftString];
};
//# sourceMappingURL=cubicCurveGenerator.js.map